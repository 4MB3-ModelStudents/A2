\documentclass[12pt]{article}

\input 4mbapreamble

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FANCY HEADER AND FOOTER STUFF%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\usepackage{fancyhdr,lastpage}
\pagestyle{fancy}
\fancyhf{}% clear all header and footer parameters
%%%\lhead{Student Name: \theblank{4cm}}
%%%\chead{}
%%%\rhead{Student Number: \theblank{3cm}}
%%%\lfoot{\small\bfseries\ifnum\thepage<\pageref{LastPage}{CONTINUED\\on next page}\else{LAST PAGE}\fi}
\lfoot{}
\cfoot{{\small\bfseries Page \thepage\ of \pageref{LastPage}}}
\rfoot{}
\renewcommand\headrulewidth{0pt}% Removes funny header line
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}


\begin{center}
{\bf Mathematics 4MB3/6MB3 Mathematical Biology\\
\smallskip
2017 ASSIGNMENT 2}\\
\medskip
\underline{\emph{Group Name}}: \texttt{{\color{blue}Model Students}}\\
\medskip
\underline{\emph{Group Members}}: {\color{blue}Nicole Dumont, Melody Fong, Connor LeDrew, Carolina Weishaar}

\end{center}

\section{Plot P\&I mortality in Philadelphia in 1918}

\begin{enumerate}[(a)]

\item Confirm that you have received this data file by e-mail:
$$\verb|pim_us_phila_city_1918_dy.csv|$$
This plain text comma-separated-value file can be examined (if you wish) using any plain text editor, such as {\tt Emacs}.

\item Read the data into a data frame in \Rlogo, using the \code{read.csv()} function.  For example, the following chunk of \Rlogo code should work:
<<read.phila.data>>=
datafile <- "pim_us_phila_city_1918_dy.csv" 
philadata <- read.csv(datafile)
philadata$date <- as.Date(philadata$date)
@ 
The purpose of the last line of code above is to ensure that \Rlogo encodes character strings such as \verb|"1918-10-15"| as dates.

\item Reproduce [the Philadelphia 1918 P\&I] plot:

  {\color{blue} \begin{proof}[Solution]
  {\color{magenta}\n
<<Q1c,echo=FALSE,fig.height=6,fig.align="center">>=
datafile <- "pim_us_phila_city_1918_dy.csv"
philadata <- read.csv(datafile)
philadata$date <- as.Date(philadata$date)
linedata <- philadata[31:41,]
loglinedata <- philadata[20:37,]

plot(pim~date,philadata,type="l",col="gray",bty="L",xlab="",ylab="",xaxs="i",yaxs="i",las=1)
  points(pim~date,philadata,pch=21,bg="red",xpd=TRUE)
  mtext("Date",side=1,line=2,adj=1,col="blue",cex=1.25)
  loc=par("usr")
  text(loc[1],loc[4],"P&I Deaths",xpd=T,adj=c(1,0),pos=3,col="blue",cex=1.25)
@
  }
  \end{proof}
}

\end{enumerate}

\section{Estimate $\R_0$ from the Philadelphia P\&I time series}

\begin{enumerate}[(a)]

\item The observed mortality time series $M(t)$ is certainly not equal to the prevalence $I(t)$ that appears in the SIR model.  Suppose, however, that $I(t) = \eta M(t-\tau)$ for all time (where $\eta$ and $\tau$ are constants), \emph{i.e.,} that the mortality curve is exactly a scaled and translated version of the prevalence curve.  Prove that if both $I$ and $M$ are growing exactly exponentially over some time period then their exponential rates are identical.  Thus, if we compare them during the ``exponential phase'' on a logarithmic scale, then both curves will be perfectly straight with exactly the same slope.

 {\color{blue} \begin{proof}[Solution]
 {\color{magenta}
  Assume that $I(t)$ and $M(t)$ are growing exponentially for $t \in (\alpha, \beta)$:
\begin{align}
  I(t) &= a_1 e^{b_1 t}  \\
  M(t) &= a_2 e^{b_2 t} 
\end{align}
If $I(t) = \eta M(t-\tau)$, then
\begin{align}
  a_1 e^{b_1 t}  &=\eta a_2 e^{b_2 (t-\tau)} \\
  e^{(b_1-b_2) t+ b_2\tau} &= \frac{\eta a_2}{a_1} \\
  (b_1-b_2) t &= \log \left ( \frac{\eta a_2}{a_1} \right )- b_2\tau \label{eq2a}
\end{align}
The left hand side of~\ref{eq2a} is a constant but this is true for a range of $t$. Therefore, the right hand side must be zero and $b_1=b_2$.
 }
 \end{proof}
 }

\item Fit a straight line to the part of the Philadelphia 1918 mortality time series that looks straight on a logarithmic scale (and show your result in a plot).  Once you get the hang of it, the easiest way to do this is to use the \code{lm()} function in \Rlogo (lm stands for linear model).  Note that simplest way to draw a straight line with given slope and intercept is with the \code{abline()} function.  If you find \code{lm()} counter-intuitive to understand then experiment with \code{abline()} until your eyes tell you that you have discovered a line that provides a good fit.

  {\color{blue} \begin{proof}[Solution]
  {\color{magenta}\n
<<Q2b,echo=FALSE,fig.height=6,fig.align="center">>=
plot(log(pim)~date,philadata,type="l",col="gray",bty="L",xlab="",ylab="",xaxs="i",yaxs="i",las=1)
points(log(pim)~date,philadata,pch=21,bg="red",xpd=TRUE)
mtext("Date",side=1,line=2,adj=1,col="blue",cex=1.25)
loc=par("usr")
text(loc[1],loc[4],"P&I Deaths",xpd=T,adj=c(1,0),pos=3,col="blue",cex=1.25)
abline(lm(log(pim)~date,loglinedata),lty=2,lwd=2)
@
  }
  \end{proof}
  }

\item How is the slope of your fitted line related to the parameters of the SIR model?  (\emph{Hint:} When $I$ is small, $S\simeq1$.) Why do you need an independent measure of the mean infectious period to estimate $\R_0$?  If the mean infectious period is 4 days, what is your estimate of $\R_0$?

  {\color{blue} \begin{proof}[Solution]
  {\color{magenta}
  Initially, when $I$ is small and $S\simeq1$, the rate of change of the prevalence goes like
\begin{align}
	\frac{dI}{dt} &= (\R_0S-1)\gamma I \\
	& \simeq (\R_0-1)\gamma I
\end{align}
Thus, initially $I(t)\simeq I_0 e^{(\R_0-1)\gamma t}$ and  
\begin{equation}
	\log(I(t))\simeq (\R_0-1)\gamma t + \log(I_0)
\end{equation}
and so the slope of the fitted line on the log plot of prevalence is $(\R_0-1)\gamma$.
Since this slope depends on both $\R_0$ and $\gamma$, another measure of $\gamma$ is required to estimate $\R_0$.
  
  }
  \end{proof}
  }

\end{enumerate}

\section{Fit the basic SIR model to the Philadelphia P\&I time series}

\begin{enumerate}[(a)]

\item Install the \verb|"deSolve"| package.  This
    is done by typing the following command in the Console pane of
    {\tt RStudio}:
    $$\verb|install.packages("deSolve")|$$
You will then be prompted to choose a mirror site from which to download the package.  It doesn't matter which mirror you choose, but choosing a site in Ontario might save a fraction of a second. \emph{Note:} This is a one-time operation.  You do not want an \code{install.packages()} command inside your solutions code.

\item Write an \Rlogo function that plots the solution $I(t)$ of the SIR model for given parameter values ($\R_0$ and $1/\gamma$) and given initial conditions ($S_0,I_0$).  Use the {\tt ode()} function in the {\tt deSolve} package.  A few hints:
  \begin{itemize}
    \item Your code will first need to load the \code{deSolve} package:
<<load.deSolve,message=FALSE>>=
library("deSolve")
@       
    \item As an example of defining a function (without getting involved with a differential equation), here is a code chunk that defines a function to plot a sine curve, and then executes the function.  Note that the default min and max $x$ values are set in the parameter list of the function definition, but the max $x$ value is changed when the function is executed:
<<plot.sine,fig.height=4>>=
plot.sine <- function( xmin=0, xmax=2*pi ) {
  x <- seq(xmin,xmax,length=100)
  plot(x, sin(x), typ="l")
  grid() # add a light grey grid
}
plot.sine(xmax=4*pi)
@ 
  \item Here's another example.  This time we first define the vector field for a differential equation.  We then use this function inside another function that plots the solution of the associated differential equation.  To understand the construction, you can, as usual, study the help page for the calling function (\verb|?ode| in this case), but the most important issues are the following.

One of the arguments of the \code{ode()} function is the function that evaluates the vector field at the current time.  To avoid confusion, choose the arguments of your vector field function to be \code{t}, \code{vars} and \code{parms} (in that order):
\begin{center}
\begin{tabular}{r p{4.25in}}
     \code{t} & The current time, which will be used within the vector field function if the system is non-autonomous. \\
     \code{vars} & A named vector of the variables in the system (\eg $S$, $I$).  The variables, as named vector passed to this function, are used in the code that defines the vector field within the function. \\
     \code{parms} & A named vector of the parameters of the system (\eg $\beta$, $\gamma$).  It is convenient---but not necessary---to specify default values for the parameters.
\end{tabular}
\end{center}

It is strongly recommended that you follow exactly the style below when defining vector fields for differential equations that you wish to solve with the \code{ode()} function.  In particular, the construction ``\verb|with(as.list(c(parms,vars)), {...})|'' makes the variables and parameters visible within the section of code between the braces (\verb|{...}|) without having to refer to the vectors or lists in which they are stored.  For example, the code would be much harder to read if each instance of \code{x} were replaced by \verb|vars$x| and each instance of \code{beta} were replaced by \verb|parms$beta|; this issue becomes extremely important for complicated vector fields.
<<SI.vec.fld>>=
## Vector Field for SI model
SI.vector.field <- function(t, vars, parms=c(beta=2,gamma=1)) {
  with(as.list(c(parms, vars)), {
    dx <- -beta*x*y # dS/dt
    dy <- beta*x*y  # dI/dt
    vec.fld <- c(dx=dx, dy=dy)
    return(list(vec.fld)) # ode() requires a list
  })
}
@ 

The following function plots a single solution of the ODE for a given initial condition (\code{ic}), integration time (\code{tmax}) and times at which the state is to be returned (\code{times}).  The vector field function is passed as the \code{func} argument and the parameter vector is passed as the \code{parms} argument.  If further arguments are given, they are passed to the \code{lines()} function that draws the solution.
<<draw.soln,tidy=FALSE>>=
## Draw solution
draw.soln <- function(ic=c(x=1,y=0), tmax=1, 
                      times=seq(0,tmax,by=tmax/500), 
                      func, parms, ... ) {
  soln <- ode(ic, times, func, parms)
  lines(times, soln[,"y"], col="blue", lwd=3, ... )
}
@ 
Note here that the call to the \code{ode()} function gives the arguments in the default order so they are interpreted correctly.  If we wished to write the arguments in a different order then we would have to be explicit about which argument is which.  For example, if we wanted to list the initial conditions last for some deep reason then we would have to write:
%% Note: the knitr chunk option eval=FALSE prevents the chunk from being evaluated.
%% It is simply typeset.
<<eval=FALSE>>=
  soln <- ode(times=times, func=func, parms=parms, y=ic)
@ 

We can now use our \code{draw.soln()} function to plot a few solutions of the SI model.

<<plot.SI.model,tidy=FALSE,fig.height=3.5,fig.width=6>>=
## Plot solutions of the SI model
tmax <- 10 # end time for numerical integration of the ODE
## draw box for plot:
plot(0,0,xlim=c(0,tmax),ylim=c(0,1),
     type="n",xlab="Time (t)",ylab="Prevalence (I)",las=1)
## initial conditions:
I0 <- 0.001
S0 <- 1 - I0
## draw solutions for several values of parameter beta:
betavals <- c(1.5,2,2.5)
for (i in 1:length(betavals)) {
  draw.soln(ic=c(x=S0,y=I0), tmax=tmax,
            func=SI.vector.field,
            parms=c(beta=betavals[i],gamma=1),
            lty=i # use a different line style for each solution
            )
}
@ 


  \end{itemize}

 {\color{blue} \begin{proof}[Solution]
 {\color{magenta} \n
 <<Q3b,eval=FALSE>>=
## Vector Field for SIR Model
SIR.vector.field <- function(t,vars,parms=c(R_0=1,gamma=1)) {
  with(as.list(c(parms,vars)), {
    dx <- -R_0*gamma*x*y  ## dS/dt
    dy <- gamma*(R_0*x*y-y)  ## dI/dt
    vec.fld <- c(dx=dx,dy=dy)
    return(list(vec.fld)) 
  })
}

## Draw Solution
draw.soln <- function(ic=c(x=1,y=0),tmax=1,
                      times=seq(0,tmax,by=tmax/500),
                      func,parms,...) {
  soln <- ode(ic,times,func,parms)
  lines(times,soln[,"y"],lwd=2,...)
}

## Plot Solutions of the SIR Model
tmax <- _____
## draw box for plot
plot(0,0,xlim=c(0,tmax),ylim=c(0,1),type="n",xlab="Time (t)",
     ylab="Prevalence (I)",las=1)
## initial conditions
I0 <- _____
S0 <- _____
## draw solutions for several values of parameter R_0
vals <- c(_____,_____,_____,_____,_____,_____,...)
line <- c(1:length(vals))
for (i in 1:length(vals)) {
  draw.soln(ic=c(x=S0,y=I0),tmax=tmax,
            func=SIR.vector.field,parms=c(R_0=vals[i],gamma=_____),
            lty=line[i], # use a different line style for each solution
            col=line[i]) # use a different line colour for each solution
}
# draw legend for different values of R_0
legend("topright",legend=vals,lty=line,col=line,title="\\R_0 Values")
@
 }
 \end{proof}
 }

\item For $I_0=10^{-3}$ and $S_0=1-I_0$, plot the solutions of the SIR model assuming $1/\gamma=4$ days and $\R_0\in\{1.2,1.5,1.8,2,3,4\}$.  Use the \code{legend()} command to make a legend on the plot that shows which curves correspond to which values of $\R_0$.

  {\color{blue} \begin{proof}[Solution]
  {\color{magenta} [Insert Text Here]
  
  <<Q3c,echo=FALSE,fig.height=6>>=
## Vector Field for SIR Model
SIR.vector.field <- function(t,vars,parms=c(R_0=1,gamma=1)) {
  with(as.list(c(parms,vars)), {
    dx <- -R_0*gamma*x*y  ## dS/dt
    dy <- gamma*(R_0*x*y-y)  ## dI/dt
    vec.fld <- c(dx=dx,dy=dy)
    return(list(vec.fld)) 
  })
}

## Draw Solution
draw.soln <- function(ic=c(x=1,y=0),tmax=1,
                      times=seq(0,tmax,by=tmax/500),
                      func,parms,...) {
  soln <- ode(ic,times,func,parms)
  lines(times,soln[,"y"],lwd=2,...)
}

## Plot Solutions of the SIR Model
tmax <- 40
## draw box for plot
plot(0,0,xlim=c(0,tmax),ylim=c(0,1),type="n",xlab="Time (t)",
     ylab="Prevalence (I)",las=1)
## initial conditions
I0 <- 1e-3
S0 <- 1-I0
## draw solutions for several values of parameter R_0
vals <- c(1.2,1.5,1.8,2,3,4)
line <- c(1:length(vals))
for (i in 1:length(vals)) {
  draw.soln(ic=c(x=S0,y=I0),tmax=tmax,
            func=SIR.vector.field,parms=c(R_0=vals[i],gamma=1/4),
            lty=line[i], # use a different line style for each solution
            col=line[i]) # use a different line colour for each solution
}
# draw legend for different values of R_0
legend("topright",legend=vals,lty=line,col=line,title="\\R_0 Values")
@
  }
  \end{proof}
  }

\item By trial and error, find values of $\R_0$ and $\gamma$ that yield a solution of the SIR model that fits the Philadelphia P\&I times series reasonably well.  You can assess the quality of fit using the Euclidean distance between the model solution and the data.  (\emph{Note:}  The trial and error approach is a valuable exercise, but not a suggestion of a method you would really use in practice.  We'll discuss better methods for fitting ODE models to data later.)

  {\color{blue} \begin{proof}[Solution]
  {\color{magenta}
  
    <<Q3d,echo=FALSE,fig.height=6,fig.align="center">>=

philadata$date <- as.numeric(as.Date(philadata$date)-as.Date(philadata$date[1]))
philadata$pim <- philadata$pim/(2*max(philadata$pim))

plot(pim~date,philadata,type="l",col="gray",bty="L",xlab="",ylab="",xaxs="i",yaxs="i",las=1)
  points(pim~date,philadata,pch=21,bg="red",xpd=TRUE)
  mtext("Days after 1918-09-01",side=1,line=2,adj=1,col="blue",cex=1.25)
  loc=par("usr")
  text(loc[1],loc[4],"P&I Deaths",xpd=T,adj=c(1,0),pos=3,col="blue",cex=1.25)

  ## Draw Solution Modified to have a start time
draw.soln <- function(ic=c(x=1,y=0),tmax=1,tstart=0,
                      times=seq(tstart,tmax,by=tmax/500-tstart/500),
                      func,parms,...) {
  soln <- ode(ic,times,func,parms)
  lines(times,soln[,"y"],lwd=2,...)
}  

## Plot Solutions of the SIR Model
tmax <- 122
tstart <- 10


## initial conditions
I0 <- 1e-3
S0 <- 1-I0

## draw solutions for several values of parameter R_0
vals <- seq(1.2,5,length=5)
line <- c(1:length(vals))
for (i in 1:length(vals)) {
  draw.soln(ic=c(x=S0,y=I0),tmax=tmax,tstart=tstart,
            func=SIR.vector.field,parms=c(R_0=vals[i],gamma=1/15),
            lty=line[i], # use a different line style for each solution
            col=line[i]) # use a different line colour for each solution
}
# draw legend for different values of R_0
legend("topright",legend=vals,lty=line,col=line,title="\\R_0 Values") #**


#define dist fct
  euc.dist <- function(x1, x2){ sqrt(sum((x1 - x2) ^ 2)) }
#distance between data and solution
modeldist <- function(R_0=2.03, gamma=1/3){
  #input to ode
  I0 <- 1e-6
  S0 <- 1-I0
  tmax <- 122
  tstart <- 0
  ic<-c(x=S0,y=I0)
  times<-seq(tstart,tmax,by=tmax/500-tstart/500)
  func<-SIR.vector.field
  parms<-c(R_0,gamma)
  #get solution
  soln <- ode(ic,times,func,parms)
  #index of rows of soln
  inxvals<-c(1:length(soln[,1]))
  
  dist <- numeric(length(philadatatrans$date))
  for (i in 1:length(philadatatrans$date)){
   x<-philadatatrans$date[i]
     #get index in soln of row with same x value as data
   index <- which(abs(soln[,1]-x)==min(abs(soln[,1]-x)))
   dist[i]=euc.dist( c(x,philadatatrans$pim[i]), c(soln[index,1],soln[index,3]))
  }
  avgdist <- mean(dist)
  return(avgdist)
}
modeldist(2.03,(1/3))

@
  
  }
  \end{proof}
  }

\end{enumerate}

\section{Executive summary for the Public Health Agency}

The Public Health Agency of Canada (PHAC) is revising their pandemic plan and has asked your group to summarize what you learned from analyzing the 1918 Philadelphia P\&I time series.  Besides explaining what inferences you feel you can make from your analysis so far, PHAC wants to know what you would investigate if they were to fund you to continue your work full time for a month.  They want a maximum of one page from your group.

Incidentally, you might be interested to know that rumour has it that all of the members of the pandemic planning committee took Math 2C03 at McMaster University in the 1980s, but they all failed.  Also, when the chair of the committee was recently asked ``What is a differential equation?'' he apparently bent over and vomited (it is hard to know quite what to make of this given that PHAC was investigating a norovirus outbreak at the time).

\smallskip
\noindent{\em\underline{Note}: When submitting your assignment solution, it is imperative that the one-page executive summary be printed on its own page.  To start a new page in \LaTeX, use the \verb|\newpage| command.  Also, as usual, your summary should be in 12 point font.  Don't try to cram in as much as possible.  Make that page as clear and concise as you can, so that a public health planner can absorb its content quickly and easily.}

  {\color{blue} \begin{proof}[Solution]
  {\color{magenta}\dots beautifully clear executive summary here, on its own page\dots}
    A plot of the original data clearly shows that the peak of the epidemic occurred in mid-October, where approximately 800 individuals died from either influenza or pneumonia. In addition to this, the epidemic appears to have endured for approximately 40 days, beginning in mid-September and ending by mid-November. Overall the data produces a curve that exhibits a symmetric relationship along the peak, which biologically may signify that the rate at which influenza spread and dissipated in this epidemic is approximately equivalent. However the biological significance of these results may not hold, due to the fact that the data is based on the assumption that individuals that exhibited symptoms characterized by pneumonia before death were afflicted by influenza. This assumption may not hold, since pneumonia is not a quantifiable marker that is always traced back directly to influenza. As a result, it is highly recommended that PHAC continues to receive funding to systematically filter out false positives, in order to increase the reliability of the data. 
The plot of the log transformed data clearly showcases the degree of variation that exists within the sections in the plot that illustrate a non-infectious period. This variability clearly shows the presence of fatal influenza cases before the epidemic. If the infectious period of influenza is high, it is possible that the deaths of the individuals observed during the period before the outbreak, could have caused the epidemic.  However, due to the fact that the number of deaths that produce this variability is very small, this observation is likely insignificant. In addition to this, the plot shows that the number of deaths that were recorded did not level off back to the values before the epidemic. This observation may mean that the disease continued to be spread by individuals that were immune infected carriers or immigrants, or that the disease continued to thrive in organisms or environments where human exposure was unlikely. Regardless of the phenomena showcased by the log transform, it is apparent by the first graph that the number of the deaths that lead to this variability between the tails of the curve and within the curve is approximately equivalent. This implies that the log transform exaggerates this relationship meaning that one must scrutinize it carefully.  
By fitting a line through the component of the log transformed curve that is increasing towards the peak, the parameter $\B$ can be estimated by calculating the slope of the linear relationship, and the parameter $\I_0$ by calculating the y-intercept of the line. The parameter $\B$ represents the average number of contacts with the susceptible population that lead to a new infective per unit time per infective in the population. Using the estimated value of $\B$, the value of $\R_0$ is estimated by using the following equation, 
\begin{equation}
	\B\simeq (\R_0-1)\gamma
\end{equation}
, where $\R_0$ represents the basic reproduction number. 
By setting $\gamma = 0.25$ this method leads to the following results, 
	$\\B = 0.2439$
	$\\R_0 = 1.9756$
	$\\I_0 = $
This fits the given dataset, since the magnitude of $\R_0$ is greater than 1, meaning $\abs{\frac{dI}{dt}} > 0$. 
  \end{proof}
  }

\bigskip

\centerline{\bf--- END OF ASSIGNMENT ---}

\bigskip
Compile time for this document:
\today\ @ \thistime

\end{document}
